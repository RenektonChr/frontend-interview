// 如何组织JS代码？
/**
 * 1. 系统架构
 * 代码库的基础设计。控制各种组件的规则。例如模型（models）、视图（views）和控制器（controllers），
 * 之间的相互作用。
 * 
 * 2. 可维护性
 * 如何更好的改进和扩展代码
 * 
 * 3. 复用性
 * 应用组件如何复用？每个组件的实例如何简便的个性化定制。
 * 
 * 二、模块模式
 * 1. 模块模式，是一个简单的结构基础。它可以让你的代码保持干净和条例清晰。一个'模块'就是一个标准的包含
 * 方法和属性的对象字面量，简单是这个模式的最大亮点：甚至一些不熟悉传统软件设计模式的人，一看就能明白
 * 代码是如何工作的。
 * 
 * 用此模式的应用，每个组件有他独立的模块。例如：创建自动完成功能，你要写一个模块用于文本区域，一个模块
 * 用于结果列表，两个模块相互工作，但是互不影响。
 * 
 * 2.模块解耦 是模块模块模式非常适于构建可靠的系统架构的原因，应用间的关系是明确定义的；任何关系到文本
 * 区域的事情被文本区域管理，并不是散落在代码库中，这样代码会整洁很多。
 * 
 * 模块化组织的另一个好处就是固有的可维护性。模块可以独立的改进和优化，不会影响应用的其他部分。
 */

// 我们看下面的例子

// 1. 基础--函数版
function a() {}
function b() {}

// 2. 入门--字面量版本
let obj = {
  init: function() {
    this.a();
    this.b();
  },
  a: function () {},
  b: function () {}
}
obj.init();

// 3. 进阶--命名空间版
var hogo = {
  ns : function(){}
}

hogo.ns('hogo.wx', {
  init : function(){
      this.a();
      this.b();
  },
  a : function(){ console.log(1) },
  b : function(){ console.log(2) }
});
hogo.wx.init();

// 4. 提高--模块化
define();
require();
